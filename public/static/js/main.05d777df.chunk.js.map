{"version":3,"sources":["theme/media.js","theme/GlobalStyle.js","components/Flick.js","components/Flicks.js","App.js","serviceWorker.js","index.js"],"names":["sizeInts","mediaSize","xs","sm","md","lg","xl","device","maxSm","maxMd","maxLg","maxXL","GlobalStyle","createGlobalStyle","Wrapper","styled","div","Poster","src","Flick","poster","title","MOVIE_QUERY","gql","SelectButtons","SelectButton","theme","button","enabled","color","background","disabled","MovieList","Banner","Flicks","state","nowPlaying","toggleNowPlayingHandler","setState","prevState","this","flicks","query","variables","loading","error","data","movies","console","log","map","id","poster_path","posterUrl","key","marqueeText","className","onClick","Component","primary","App","Boolean","window","location","hostname","match","client","ApolloClient","uri","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.05d777df.chunk.js","sourcesContent":["export const sizeInts = {\n  xs: 450,\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200,\n};\n\nexport const mediaSize = {\n  xs: `${sizeInts.xs}px`,\n  sm: `${sizeInts.sm}px`,\n  md: `${sizeInts.md}px`,\n  lg: `${sizeInts.lg}px`,\n  xl: `${sizeInts.xl}px`,\n};\n\nexport const device = {\n  sm: `(min-width: ${mediaSize.sm})`,\n  md: `(min-width: ${mediaSize.md})`,\n  lg: `(min-width: ${mediaSize.lg})`,\n  xl: `(min-width: ${mediaSize.xl})`,\n  maxSm: `(max-width: ${sizeInts.sm - 1}px)`,\n  maxMd: `(max-width: ${sizeInts.md - 1}px)`,\n  maxLg: `(max-width: ${sizeInts.lg - 1}px)`,\n  maxXL: `(max-width: ${sizeInts.xl - 1}px)`,\n};\n","import { createGlobalStyle } from 'styled-components';\nimport { device } from './media';\n\nconst GlobalStyle = createGlobalStyle`\n  * { \n    margin: 0;\n    padding: 0;\n  }\n\n  *,\n  *::after,\n  *::before {\n    box-sizing: inherit;\n    -moz-box-sizing: inherit; \n    -webkit-box-sizing: inherit;\n  }\n\n  html {\n    box-sizing: border-box;\n    font-size: 50%;\n\n    @media ${device.md} {\n      font-size: 62.5%; \n    }\n\n    @media ${device.xl} {\n      font-size: 75%; \n    }\n  }\n\n  body {\n    background-image: linear-gradient(to right bottom, dodgerblue, ghostwhite);\n    background-size: cover;\n    background-repeat: no-repeat;\n    min-height: 100vh;\n    font-size: 1.8rem;\n\n    address, h1, h2, h3, h4, h5, h6 {\n    }\n    \n    * {\n      display: flex;\n      flex-flow: column;\n      align-items: center;\n    }\n    \n    h1 {\n    }\n\n    h2 {\n    }\n\n    @media ${device.md} {\n      font-size: 1.4rem;\n    }\n  }\n`;\n\nexport default GlobalStyle;","import React from 'react';\nimport styled from 'styled-components';\nimport { device } from 'theme/media';\n\nconst Wrapper = styled.div`\n  margin-bottom: 2rem;\n\n  @media ${device.sm} {}\n\n  @media ${device.md} {}\n\n  @media ${device.lg} {}\n\n  @media ${device.xl} {}\n`;\n\nconst Poster = styled.div`\n  width: 30rem;\n  height: calc(750 / 500 * 30rem);\n  background-image: url(${({ src }) => src});\n  background-size: cover;\n`\n\nconst Flick = ({ poster, title }) => {\n\n  return (\n    <Wrapper>\n      <Poster\n        src={poster}\n      />\n      <div>{title}</div>\n    \n    </Wrapper>\n  );\n};\n\nFlick.propTypes = {\n};\n\nexport default Flick\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { device } from 'theme/media';\nimport Flick from './Flick';\n\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nconst MOVIE_QUERY = gql`\n  query MovieQuery($query: String) {\n    movies(query: $query) {\n      id\n      title\n      poster_path\n    }\n  }\n`;\n\nconst Wrapper = styled.div`\n\n  @media ${device.sm} {}\n\n  @media ${device.md} {}\n\n  @media ${device.lg} {}\n\n  @media ${device.xl} {}\n`;\n\nconst SelectButtons = styled.div`\n  width: 100%;\n  padding: 2rem;\n  justify-content: space-evenly;\n\n  @media ${device.lg} {\n    width: 80rem;\n    flex-direction: row;\n  }\n`;\n\nconst SelectButton = styled.div`\n  width: 30rem;\n  height: 6rem;\n  font-size: 2.4rem;\n  font-weight: 600;\n  justify-content: center;\n  text-transform: uppercase;\n  color: red;\n  background-color: white;\n  box-shadow: 2px 1px 10px grey;\n  cursor: pointer;\n  border: 2px solid ${({ theme: { button: { enabled} }}) => enabled.color};\n  color: ${({ theme: { button: { enabled} }}) => enabled.color};\n  background-color: ${({ theme: {button: { enabled} }}) => enabled.background};\n\n  &.active {\n    border: 2px solid ${({ theme: { button: { disabled} }}) => disabled.color};\n    color: ${({ theme: { button: { disabled} }}) => disabled.color};\n    background-color: ${({ theme: {button: { disabled} }}) => disabled.background};\n    pointer-events: none;\n  }\n\n  &:not(:first-child) {\n    margin: 1rem 0 0 0;\n  }\n\n  @media ${device.lg} {\n    margin: 0;\n  }\n`;\n\nconst MovieList = styled.div`\n  padding: 1rem 2rem;\n  border: 1px inset white;\n  background-image: linear-gradient(to bottom right, dodgerblue, ghostwhite);\n  height: calc(750 * 1.75 / 500 * 30rem);\n  overflow: auto;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n  max-width: 80rem;\n  margin-bottom: 2rem;\n`;\n\nconst Banner = styled.div`\n  height: 8rem;\n  margin: 3rem 0%;\n  padding: 1rem 2rem;\n  font-family: serif;\n  font-size: 3.2rem;\n  justify-content: center;\n`;\n\nclass Flicks extends Component {\n  state = {\n    nowPlaying: true,\n  }\n\n  toggleNowPlayingHandler = () => {\n    this.setState((prevState) => ({ nowPlaying: !prevState.nowPlaying }))\n  }\n\n  render() {\n    const { nowPlaying } = this.state;\n\n    const flicks = (\n      <Query query={MOVIE_QUERY} variables={{\n        query: nowPlaying\n          ? 'now_playing'\n          : 'upcoming'\n      }}>\n          {\n            ({ loading, error, data: { movies } = {} }) => {\n              if (loading) return <h1>... Loading</h1>\n              if (error) { console.log(error); return; }\n              return (\n                movies.map(({ id, title, poster_path }) => {\n                  const posterUrl = `http://image.tmdb.org/t/p/w500/${poster_path}`\n\n                  return (\n                    <Flick key={id}\n                      poster={posterUrl}\n                      title={title}\n                    />\n                  )\n                })\n              )\n            }\n          }\n        </Query>\n    )\n\n    const marqueeText = nowPlaying\n          ? 'Now Showing'\n          : 'Coming Soon';\n\n    return (\n      <Wrapper>\n        <SelectButtons>\n          <SelectButton\n            className={nowPlaying ? 'active' : 'inactive'}\n            onClick={this.toggleNowPlayingHandler}\n          >\n            Now Playing\n          </SelectButton>\n          <SelectButton\n            className={nowPlaying ? 'inactive' : 'active'}\n            onClick={this.toggleNowPlayingHandler}\n          >\n            Upcoming\n          </SelectButton>\n          \n        </SelectButtons>\n        <Banner>\n          {marqueeText}\n        </Banner>\n        <MovieList>\n          {flicks}\n        </MovieList>\n      </Wrapper>\n    );\n  } \n}\n\nFlicks.propTypes = {\n};\n\nexport default Flicks\n","import React, { Component } from 'react';\nimport GlobalStyle from './theme/GlobalStyle';\nimport { ThemeProvider } from 'styled-components';\nimport Flicks from './components/Flicks';\n\nconst theme = {\n  primary: 'dodgerblue',\n  button: {\n    enabled: {\n      background: 'ghostwhite',\n      color: 'dodgerblue',\n    },\n    disabled: {\n      background: '#c0d1ed',\n      color: '#97a5bd',\n    }\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <ThemeProvider theme={theme} >\n        <GlobalStyle />\n        <Flicks />\n      </ThemeProvider>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n})\n\nconst app = (\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n)\n\nReactDOM.render(\n  app,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}